Στη JavaScript, μια function (συνάρτηση) είναι ένα μπλοκ κώδικα που έχει σχεδιαστεί για να εκτελεί μια συγκεκριμένη εργασία.
 Μπορείς να την εκτελέσεις (να την καλέσεις) όποτε θέλεις, και μπορεί να πάρει παραμέτρους και να επιστρέψει μια τιμή.

Παράδειγμα μιας απλής συνάρτησης:

// Ορισμός συνάρτησης
function greet(name) {
  console.log("Γεια σου, " + name + "!");
}

// Κλήση της συνάρτησης
greet("Μαρία"); // Εκτυπώνει: Γεια σου, Μαρία!
Αναλυτικά:
Ορισμός συνάρτησης: Με τη λέξη-κλειδί function ορίζεις τη συνάρτηση, δίνοντάς της ένα όνομα (π.χ. greet). Μέσα στις παρενθέσεις μπορείς να περάσεις παραμέτρους (όπως το name).
Κλήση συνάρτησης: Καλείς τη συνάρτηση με το όνομά της (π.χ. greet("Μαρία")), περνώντας την τιμή που θέλεις να χρησιμοποιήσει (εδώ το "Μαρία").
Συναρτήσεις με επιστροφή τιμής:
javascript
Copy code
function add(a, b) {
  return a + b;
}

let result = add(3, 4); // Το result θα είναι 7
console.log(result); // Εκτυπώνει: 7
Εδώ η συνάρτηση add παίρνει δύο αριθμούς, τους προσθέτει και επιστρέφει το αποτέλεσμα με τη λέξη-κλειδί return

Function Expression (Έκφραση Συνάρτησης)
Η function expression είναι όταν μια συνάρτηση ορίζεται μέσα σε μια έκφραση, συνήθως την αναθέτουμε σε μια μεταβλητή:

const sayHello = function() {
  console.log("Γεια σου!");
};
Χαρακτηριστικά:
Η συνάρτηση μπορεί να είναι ανώνυμη (όπως εδώ), αλλά μπορείς να δώσεις και όνομα αν το επιθυμείς.
Οι εκφράσεις συνάρτησης δεν ανυψώνονται (no hoisting), επομένως η συνάρτηση δεν μπορεί να κληθεί πριν οριστεί.
Παράδειγμα:

sayHello(); // Θα πετάξει σφάλμα: sayHello is not defined

const sayHello = function() {
  console.log("Γεια σου!");
};
Σε αυτό το παράδειγμα, θα πάρεις σφάλμα αν προσπαθήσεις να καλέσεις τη συνάρτηση πριν την ορίσεις, 
γιατί οι function expressions δεν ανυψώνονται.

Arrow Function ειναι συντομογραφια της Function Expression:

const sayHello = function() {
  console.log("Γεια σου!");
};

Σε Arrow:

const sayHello = () => console.log("Γεια σου!");



const friends = ['a','b', 'c'];

const lengthFriend = friends.push("Valentin");
console.log(lengthFriend); // 4
console.log(friends); // [ "a", "b", "c", "Valentin" ]

friends.unshift("J");
console.log(friends, friends.unshift("J")); // [ "J", "a", "b", "c" ] 6

const popped = friends.pop();
console.log(popped); // Valentin
console.log(friends); // [ "J", "J", "a", "b", "c" ]

const shifted = friends.shift("What a sigma");
console.log(shifted); // J
console.log(friends) // [ "J", "a", "b", "c" ]

console.log(friends.indexOf("the element we want to searched if exist")) // -1 if dont exist the index of element in array if exist

console.log(friends.includes("")) // return true if exist and false if dont



Στην JavaScript, ένα object (αντικείμενο) είναι μια συλλογή από ιδιότητες, όπου κάθε ιδιότητα αποτελείται από ένα κλειδί (key)
και μια τιμή (value). Οι ιδιότητες μπορούν να είναι είτε μεταβλητές (values) είτε συναρτήσεις (methods).

Χρήση του literal notation (συνιστώμενος τρόπος):

let car = {
  make: 'Toyota',
  model: 'Corolla',
  year: 2020,
  start: function() {
    console.log('Car started');
  }
};
Πρόσβαση σε Ιδιότητες
Μπορείς να προσπελάσεις τις ιδιότητες ενός αντικειμένου με δύο τρόπους:

Dot notation (Σημειογραφία κουκκίδας):

console.log(car.make);  // 'Toyota'
Bracket notation (Σημειογραφία αγκύλης):

console.log(car['model']);  // 'Corolla'
Πρόσθεση/Τροποποίηση Ιδιοτήτων
Μπορείς να προσθέσεις νέες ιδιότητες ή να τροποποιήσεις υπάρχουσες:

car.color = 'red';  // Προσθήκη νέας ιδιότητας
car.year = 2021;    // Τροποποίηση υπάρχουσας ιδιότητας
Μέθοδοι
Τα αντικείμενα μπορούν να περιέχουν και συναρτήσεις ως ιδιότητες, που ονομάζονται μέθοδοι:

car.start();  // Εκτύπωση: 'Car started'



Ο βρόχος for στην JavaScript είναι ένας επαναληπτικός μηχανισμός που σου επιτρέπει να επαναλαμβάνεις ένα σύνολο εντολών για συγκεκριμένο αριθμό
 φορών ή μέχρι να πληρούνται ορισμένες προϋποθέσεις.

Σύνταξη:
javascript
for (αρχικοποίηση; συνθήκη; βήμα) {
  // Κώδικας που θα εκτελεστεί
}
Αρχικοποίηση: Η δήλωση που εκτελείται μία φορά πριν ξεκινήσει ο βρόχος. Συνήθως είναι η δήλωση μιας μεταβλητής με αρχική τιμή.
Συνθήκη: Η συνθήκη που ελέγχεται πριν από κάθε επανάληψη. Αν είναι αληθής, ο βρόχος συνεχίζει. Αν είναι ψευδής, ο βρόχος σταματά.
Βήμα: Εκτελείται στο τέλος κάθε επανάληψης και συνήθως αυξάνει ή μειώνει την τιμή της μεταβλητής που ελέγχει την συνθήκη.
Παράδειγμα:
Ας δούμε ένα παράδειγμα μετρώντας από το 1 μέχρι το 5.

for (let i = 1; i <= 5; i++) {
  console.log(i);
}
Εξήγηση:
Αρχικοποίηση: Ορίζουμε την μεταβλητή i = 1.
Συνθήκη: Ο βρόχος θα συνεχίσει όσο το i είναι μικρότερο ή ίσο με 5.
Βήμα: Στο τέλος κάθε επανάληψης, αυξάνουμε το i κατά 1 με την εντολή i++.
Με αυτή τη λογική, το πρόγραμμα θα τυπώσει τους αριθμούς 1, 2, 3, 4 και 5.