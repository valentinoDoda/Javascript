JavaScript Primitive Types

1. Number: Αριθμητικές τιμές (ακέραιες και δεκαδικές).
   Παράδειγμα:
   let age = 25;
   let pi = 3.14;

2. String: Ακολουθίες χαρακτήρων (κείμενο).
   Παράδειγμα:
   let name = "Maria";
   let greeting = 'Hello, world!';

3. Boolean: Λογικές τιμές (true/false).
   Παράδειγμα:
   let isAdult = true;
   let hasLicense = false;

4. Undefined: Δηλωμένη μεταβλητή χωρίς αρχικοποίηση.
   Παράδειγμα:
   let notAssigned;
   console.log(notAssigned); // undefined

5. Null: Μηδενική ή κενή τιμή.
   Παράδειγμα:
   let emptyValue = null;

6. Symbol (ES6): Μοναδική και αμετάβλητη τιμή, συχνά για properties αντικειμένων.
   Παράδειγμα:
   let uniqueKey = Symbol('key');

7. BigInt (ES2020): Για αναπαράσταση πολύ μεγάλων αριθμών που δεν υποστηρίζονται από τον τύπο Number.
   Παράδειγμα:
   let bigNumber = BigInt(9007199254740991);

Primitive τύποι στη JavaScript είναι απλοί, αποθηκεύονται by value και δεν έχουν ιδιότητες ή μεθόδους όπως τα αντικείμενα.

Διαφορές var, let, const στην JavaScript

1. var: Πεδίο ορισμού σε συνάρτηση (function-scoped)
------------------------------------------------------
Το `var` είναι μια παλαιότερη μέθοδος για την κήρυξη μεταβλητών. Έχει function scope, δηλαδή είναι προσβάσιμη σε όλη τη συνάρτηση όπου δηλώθηκε, ακόμα και πριν από το σημείο όπου κηρύχθηκε (hoisting).

Παράδειγμα:
-----------
function buyGroceries() {
  var total = 10; // δηλώνεται με var
  
  if (true) {
    var discount = 2; // Προσβάσιμο και έξω από το if
  }
  
  console.log(total - discount); // Μπορούμε να χρησιμοποιήσουμε το discount
}

buyGroceries(); // Output: 8

2. let: Πεδίο ορισμού σε μπλοκ (block-scoped)
----------------------------------------------
Το `let` είναι πιο σύγχρονη δήλωση μεταβλητής και έχει block scope, δηλαδή είναι προσβάσιμη μόνο μέσα στο μπλοκ όπου κηρύχθηκε (π.χ. μέσα σε {}).

Παράδειγμα:
-----------
function buyGroceries() {
  let total = 10; // δηλώνεται με let
  
  if (true) {
    let discount = 2; // Μόνο μέσα στο if
    console.log(total - discount); // Output: 8
  }
  
  console.log(discount); // Θα προκαλέσει σφάλμα
}

buyGroceries();

3. const: Σταθερές τιμές, πεδίο ορισμού σε μπλοκ
-------------------------------------------------
Το `const` χρησιμοποιείται για τη δήλωση σταθερών. Μόλις οριστεί μια τιμή σε μια μεταβλητή `const`, δεν μπορεί να αλλάξει. Όπως και το `let`, είναι block-scoped.

Παράδειγμα:
-----------
function buyGroceries() {
  const total = 10; // δηλώνεται με const και δεν αλλάζει
  
  if (true) {
    const discount = 2;
    console.log(total - discount); // Output: 8
  }
  
  // total = 12; // Θα προκαλέσει σφάλμα
}

buyGroceries();

Παράδειγμα με πίνακα:
----------------------
const fruits = ['apple', 'banana'];
fruits.push('orange'); // επιτρέπεται, αλλάζουμε τα περιεχόμενα
// fruits = ['apple', 'banana', 'orange']; // αυτό θα προκαλέσει σφάλμα

Συνοπτικά:
-----------
- var: Πεδίο ορισμού σε συνάρτηση, μπορεί να δηλωθεί και να χρησιμοποιηθεί πριν τη δήλωσή του λόγω hoisting.
- let: Πεδίο ορισμού σε μπλοκ, δεν μπορεί να χρησιμοποιηθεί πριν τη δήλωσή του (temporal dead zone).
- const: Πεδίο ορισμού σε μπλοκ, δεν μπορεί να επαναπροσδιοριστεί, αλλά τα αντικείμενα ή οι πίνακες που δηλώνονται με const μπορούν να τροποποιηθούν.


1. Αριθμητικοί τελεστές (Arithmetic Operators)
Αυτοί οι τελεστές χρησιμοποιούνται για βασικές μαθηματικές πράξεις:

- Πρόσθεση (+): Προσθέτει δύο αριθμούς.
  let a = 5 + 3;  // a = 8

- Αφαίρεση (-): Αφαιρεί έναν αριθμό από έναν άλλο.
  let b = 5 - 3;  // b = 2

- Πολλαπλασιασμός (*): Πολλαπλασιάζει δύο αριθμούς.
  let c = 5 * 3;  // c = 15

- Διαίρεση (/): Διαιρεί έναν αριθμό με έναν άλλο.
  let d = 9 / 3;  // d = 3

- Υπόλοιπο (%): Δίνει το υπόλοιπο μιας διαίρεσης (modulo).
  let e = 10 % 3;  // e = 1

- Αύξηση (++) και Μείωση (--): Αυξάνει ή μειώνει έναν αριθμό κατά 1.
  let x = 5;
  x++;  // x = 6
  x--;  // x = 5

2. Τελεστές Ανάθεσης (Assignment Operators)
Οι τελεστές ανάθεσης χρησιμοποιούνται για να αναθέσουμε τιμές σε μεταβλητές.

- Απλή ανάθεση (=): Αναθέτει τιμή σε μια μεταβλητή.
  let z = 5;

- Πρόσθεσης και ανάθεσης (+=): Προσθέτει και αναθέτει.
  let z = 5;
  z += 3;  // z = 8

- Αφαίρεσης και ανάθεσης (-=): Αφαιρεί και αναθέτει.
  let z = 5;
  z -= 3;  // z = 2

- Πολλαπλασιασμού και ανάθεσης (*=): Πολλαπλασιάζει και αναθέτει.
  let z = 5;
  z *= 3;  // z = 15

- Διαίρεσης και ανάθεσης (/=): Διαιρεί και αναθέτει.
  let z = 5;
  z /= 3;  // z = 1.6666...






JavaScript Δήλωση if

1. Εισαγωγή
Η δήλωση `if` επιτρέπει την εκτέλεση διαφορετικών τμημάτων κώδικα, ανάλογα με την αξιολόγηση συνθηκών.

2. Βασική Σύνταξη
Η βασική σύνταξη της δήλωσης `if` είναι η εξής:

if (condition) {
    // Κώδικας που εκτελείται αν η συνθήκη είναι αληθής
}

Παράδειγμα:
let age = 20;
if (age >= 18) {
    console.log("Είσαι ενήλικος.");
}

3. Δήλωση else
Η δήλωση `else` χρησιμοποιείται για να εκτελεί κώδικα αν η συνθήκη της δήλωσης `if` είναι ψευδής.

if (condition) {
    // Κώδικας που εκτελείται αν η συνθήκη είναι αληθής
} else {
    // Κώδικας που εκτελείται αν η συνθήκη είναι ψευδής
}

Παράδειγμα:
let age = 16;
if (age >= 18) {
    console.log("Είσαι ενήλικος.");
} else {
    console.log("Είσαι ανήλικος.");
}

4. Δήλωση else if
Η δήλωση `else if` επιτρέπει την προσθήκη επιπλέον συνθηκών αν η αρχική συνθήκη της δήλωσης `if` είναι ψευδής.

if (condition1) {
    // Κώδικας που εκτελείται αν η συνθήκη1 είναι αληθής
} else if (condition2) {
    // Κώδικας που εκτελείται αν η συνθήκη2 είναι αληθής
} else {
    // Κώδικας που εκτελείται αν όλες οι προηγούμενες συνθήκες είναι ψευδείς
}

Παράδειγμα:
let score = 85;
if (score >= 90) {
    console.log("Άριστα.");
} else if (score >= 75) {
    console.log("Καλά.");
} else if (score >= 50) {
    console.log("Επαρκώς.");
} else {
    console.log("Ανεπαρκώς.");
}

5. Λογικοί Τελεστές
Οι λογικοί τελεστές επιτρέπουν την σύνθεση συνθηκών:

- `&&` (Και): Επιστρέφει `true` αν και οι δύο συνθήκες είναι αληθείς.
- `||` (Ή): Επιστρέφει `true` αν τουλάχιστον μία από τις συνθήκες είναι αληθής.
- `!` (Όχι): Αντιστρέφει την τιμή της συνθήκης.

Παράδειγμα:
let age = 25;
let hasID = true;

if (age >= 18 && hasID) {
    console.log("Μπορείς να εισέλθεις.");
} else {
    console.log("Δεν μπορείς να εισέλθεις.");
}

6. Αντίκτυποι
- **Βασική χρήση**: Εντοπισμός συνθηκών και εκτέλεση κώδικα ανάλογα.
- **Πολυπλοκότητα**: Ο κώδικας μπορεί να γίνει πιο σύνθετος με πολλές συνθήκες και χρήσεις `else if`.
- **Συνθήκες**: Εξασφάλιση ότι οι συνθήκες καλύπτουν όλες τις περιπτώσεις που απαιτούνται.

7. Καλές Πρακτικές
- Χρησιμοποιήστε `else if` μόνο αν έχετε πολλές συνθήκες που πρέπει να ελέγξετε.
- Εξασφαλίστε ότι οι συνθήκες είναι καθαρές και κατανοητές.
- Κρατήστε τον κώδικα αναγνώσιμο και οργανωμένο.

Η Explicit Type Conversion συμβαίνει όταν ο προγραμματιστής μετατρέπει σκόπιμα μια τιμή σε έναν άλλο τύπο δεδομένων.
Αυτό επιτυγχάνεται χρησιμοποιώντας συγκεκριμένες συναρτήσεις,
όπως String(), Number(), ή Boolean(). Εδώ, η μετατροπή γίνεται ρητά και είναι ξεκάθαρη.
Παράδειγμα:

let num = 42;
let str = String(num); // Μετατροπή αριθμού σε συμβολοσειρά
console.log(typeof str); // "string"

let bool = Boolean(num); // Μετατροπή αριθμού σε boolean
console.log(bool); // true

Coercion (Implicit)
Η Implicit Coercion συμβαίνει όταν η JavaScript μετατρέπει αυτόματα έναν τύπο δεδομένων σε έναν άλλο, 
χωρίς την παρέμβαση του προγραμματιστή. Αυτό συμβαίνει κυρίως σε πράξεις που περιλαμβάνουν διαφορετικούς τύπους δεδομένων,
 όπως αριθμούς και συμβολοσειρές.

Υπάρχουν δύο είδη implicit coercion:

String coercion: Όταν ένας αριθμός ή ένα boolean χρησιμοποιείται σε μια πρόταση με συμβολοσειρά.
Number coercion: Όταν μια συμβολοσειρά μετατρέπεται σε αριθμό σε αριθμητικές πράξεις.
Παράδειγμα:
let num = 42;
let str = "The answer is " + num; // JavaScript μετατρέπει το num σε συμβολοσειρά
console.log(str); // "The answer is 42"

let result = '5' - 2; // JavaScript μετατρέπει τη συμβολοσειρά '5' σε αριθμό
console.log(result); // 3